package com.today36524.api.user
        import com.today36524.api.user.request.serializer._;import com.today36524.api.user.response.serializer._;

        import com.isuwang.dapeng.core._
        import com.isuwang.org.apache.thrift._
        import com.isuwang.org.apache.thrift.protocol._

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.2)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/
        object UserServiceCodec {

        
            case class registerUser_args(request:com.today36524.api.user.request.RegisterUserRequest)

            case class registerUser_result(success:com.today36524.api.user.response.RegisterUserResponse)

            class RegisterUser_argsSerializer extends TCommonBeanSerializer[registerUser_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): registerUser_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.today36524.api.user.request.RegisterUserRequest = null
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRUCT => request = new com.today36524.api.user.request.serializer.RegisterUserRequestSerializer().read(iprot)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = registerUser_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: registerUser_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("registerUser_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
             new com.today36524.api.user.request.serializer.RegisterUserRequestSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: registerUser_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.today36524.api.user.request.serializer.RegisterUserRequestSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: registerUser_args): String = if(bean == null)  "null" else bean.toString
            }

            class RegisterUser_resultSerializer extends TCommonBeanSerializer[registerUser_result]{

            @throws[TException]
            override def read(iprot: TProtocol): registerUser_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : com.today36524.api.user.response.RegisterUserResponse = null

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.STRUCT =>  success = new com.today36524.api.user.response.serializer.RegisterUserResponseSerializer().read(iprot)
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = registerUser_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: registerUser_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("registerUser_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 0.asInstanceOf[Short]))
             new com.today36524.api.user.response.serializer.RegisterUserResponseSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: registerUser_result): Unit = {
      
              if(bean.success == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空")
            
                if(bean.success != null)
                new com.today36524.api.user.response.serializer.RegisterUserResponseSerializer().validate(bean.success)
              
    }
    

            override def toString(bean: registerUser_result): String = if(bean == null)  "null" else bean.toString
          }

            class registerUser extends SoaProcessFunction[com.today36524.api.user.service.UserService, registerUser_args, registerUser_result, RegisterUser_argsSerializer,  RegisterUser_resultSerializer]("registerUser", new RegisterUser_argsSerializer(), new RegisterUser_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: registerUser_args = null


            @throws[TException]
            def getResult(iface: com.today36524.api.user.service.UserService, args: registerUser_args):registerUser_result = {

              val _result = iface.registerUser(args.request)
              registerUser_result(_result )
            }
          }
          
            case class login_args(request:com.today36524.api.user.request.LoginUserRequest)

            case class login_result(success:com.today36524.api.user.response.LoginUserResponse)

            class Login_argsSerializer extends TCommonBeanSerializer[login_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): login_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.today36524.api.user.request.LoginUserRequest = null
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRUCT => request = new com.today36524.api.user.request.serializer.LoginUserRequestSerializer().read(iprot)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = login_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: login_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("login_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
             new com.today36524.api.user.request.serializer.LoginUserRequestSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: login_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.today36524.api.user.request.serializer.LoginUserRequestSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: login_args): String = if(bean == null)  "null" else bean.toString
            }

            class Login_resultSerializer extends TCommonBeanSerializer[login_result]{

            @throws[TException]
            override def read(iprot: TProtocol): login_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : com.today36524.api.user.response.LoginUserResponse = null

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.STRUCT =>  success = new com.today36524.api.user.response.serializer.LoginUserResponseSerializer().read(iprot)
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = login_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: login_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("login_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 0.asInstanceOf[Short]))
             new com.today36524.api.user.response.serializer.LoginUserResponseSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: login_result): Unit = {
      
              if(bean.success == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空")
            
                if(bean.success != null)
                new com.today36524.api.user.response.serializer.LoginUserResponseSerializer().validate(bean.success)
              
    }
    

            override def toString(bean: login_result): String = if(bean == null)  "null" else bean.toString
          }

            class login extends SoaProcessFunction[com.today36524.api.user.service.UserService, login_args, login_result, Login_argsSerializer,  Login_resultSerializer]("login", new Login_argsSerializer(), new Login_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: login_args = null


            @throws[TException]
            def getResult(iface: com.today36524.api.user.service.UserService, args: login_args):login_result = {

              val _result = iface.login(args.request)
              login_result(_result )
            }
          }
          
            case class modifyUser_args(request:com.today36524.api.user.request.ModifyUserRequest)

            case class modifyUser_result(success:com.today36524.api.user.response.ModifyUserResponse)

            class ModifyUser_argsSerializer extends TCommonBeanSerializer[modifyUser_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): modifyUser_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.today36524.api.user.request.ModifyUserRequest = null
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRUCT => request = new com.today36524.api.user.request.serializer.ModifyUserRequestSerializer().read(iprot)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = modifyUser_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: modifyUser_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("modifyUser_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
             new com.today36524.api.user.request.serializer.ModifyUserRequestSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: modifyUser_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.today36524.api.user.request.serializer.ModifyUserRequestSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: modifyUser_args): String = if(bean == null)  "null" else bean.toString
            }

            class ModifyUser_resultSerializer extends TCommonBeanSerializer[modifyUser_result]{

            @throws[TException]
            override def read(iprot: TProtocol): modifyUser_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : com.today36524.api.user.response.ModifyUserResponse = null

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.STRUCT =>  success = new com.today36524.api.user.response.serializer.ModifyUserResponseSerializer().read(iprot)
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = modifyUser_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: modifyUser_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("modifyUser_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 0.asInstanceOf[Short]))
             new com.today36524.api.user.response.serializer.ModifyUserResponseSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: modifyUser_result): Unit = {
      
              if(bean.success == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空")
            
                if(bean.success != null)
                new com.today36524.api.user.response.serializer.ModifyUserResponseSerializer().validate(bean.success)
              
    }
    

            override def toString(bean: modifyUser_result): String = if(bean == null)  "null" else bean.toString
          }

            class modifyUser extends SoaProcessFunction[com.today36524.api.user.service.UserService, modifyUser_args, modifyUser_result, ModifyUser_argsSerializer,  ModifyUser_resultSerializer]("modifyUser", new ModifyUser_argsSerializer(), new ModifyUser_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: modifyUser_args = null


            @throws[TException]
            def getResult(iface: com.today36524.api.user.service.UserService, args: modifyUser_args):modifyUser_result = {

              val _result = iface.modifyUser(args.request)
              modifyUser_result(_result )
            }
          }
          
            case class freezeUser_args(request:com.today36524.api.user.request.FreezeUserRequest)

            case class freezeUser_result(success:com.today36524.api.user.response.FreezeUserResponse)

            class FreezeUser_argsSerializer extends TCommonBeanSerializer[freezeUser_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): freezeUser_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.today36524.api.user.request.FreezeUserRequest = null
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRUCT => request = new com.today36524.api.user.request.serializer.FreezeUserRequestSerializer().read(iprot)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = freezeUser_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: freezeUser_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("freezeUser_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
             new com.today36524.api.user.request.serializer.FreezeUserRequestSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: freezeUser_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.today36524.api.user.request.serializer.FreezeUserRequestSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: freezeUser_args): String = if(bean == null)  "null" else bean.toString
            }

            class FreezeUser_resultSerializer extends TCommonBeanSerializer[freezeUser_result]{

            @throws[TException]
            override def read(iprot: TProtocol): freezeUser_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : com.today36524.api.user.response.FreezeUserResponse = null

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.STRUCT =>  success = new com.today36524.api.user.response.serializer.FreezeUserResponseSerializer().read(iprot)
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = freezeUser_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: freezeUser_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("freezeUser_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 0.asInstanceOf[Short]))
             new com.today36524.api.user.response.serializer.FreezeUserResponseSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: freezeUser_result): Unit = {
      
              if(bean.success == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空")
            
                if(bean.success != null)
                new com.today36524.api.user.response.serializer.FreezeUserResponseSerializer().validate(bean.success)
              
    }
    

            override def toString(bean: freezeUser_result): String = if(bean == null)  "null" else bean.toString
          }

            class freezeUser extends SoaProcessFunction[com.today36524.api.user.service.UserService, freezeUser_args, freezeUser_result, FreezeUser_argsSerializer,  FreezeUser_resultSerializer]("freezeUser", new FreezeUser_argsSerializer(), new FreezeUser_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: freezeUser_args = null


            @throws[TException]
            def getResult(iface: com.today36524.api.user.service.UserService, args: freezeUser_args):freezeUser_result = {

              val _result = iface.freezeUser(args.request)
              freezeUser_result(_result )
            }
          }
          
            case class blackUser_args(request:com.today36524.api.user.request.BlackUserRequest)

            case class blackUser_result(success:com.today36524.api.user.response.BlackUserResponse)

            class BlackUser_argsSerializer extends TCommonBeanSerializer[blackUser_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): blackUser_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.today36524.api.user.request.BlackUserRequest = null
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRUCT => request = new com.today36524.api.user.request.serializer.BlackUserRequestSerializer().read(iprot)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = blackUser_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: blackUser_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("blackUser_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
             new com.today36524.api.user.request.serializer.BlackUserRequestSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: blackUser_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.today36524.api.user.request.serializer.BlackUserRequestSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: blackUser_args): String = if(bean == null)  "null" else bean.toString
            }

            class BlackUser_resultSerializer extends TCommonBeanSerializer[blackUser_result]{

            @throws[TException]
            override def read(iprot: TProtocol): blackUser_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : com.today36524.api.user.response.BlackUserResponse = null

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.STRUCT =>  success = new com.today36524.api.user.response.serializer.BlackUserResponseSerializer().read(iprot)
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = blackUser_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: blackUser_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("blackUser_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 0.asInstanceOf[Short]))
             new com.today36524.api.user.response.serializer.BlackUserResponseSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: blackUser_result): Unit = {
      
              if(bean.success == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空")
            
                if(bean.success != null)
                new com.today36524.api.user.response.serializer.BlackUserResponseSerializer().validate(bean.success)
              
    }
    

            override def toString(bean: blackUser_result): String = if(bean == null)  "null" else bean.toString
          }

            class blackUser extends SoaProcessFunction[com.today36524.api.user.service.UserService, blackUser_args, blackUser_result, BlackUser_argsSerializer,  BlackUser_resultSerializer]("blackUser", new BlackUser_argsSerializer(), new BlackUser_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: blackUser_args = null


            @throws[TException]
            def getResult(iface: com.today36524.api.user.service.UserService, args: blackUser_args):blackUser_result = {

              val _result = iface.blackUser(args.request)
              blackUser_result(_result )
            }
          }
          
            case class changeUserIntegral_args(request:com.today36524.api.user.request.ChangeIntegralRequest)

            case class changeUserIntegral_result(success:Int)

            class ChangeUserIntegral_argsSerializer extends TCommonBeanSerializer[changeUserIntegral_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): changeUserIntegral_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.today36524.api.user.request.ChangeIntegralRequest = null
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRUCT => request = new com.today36524.api.user.request.serializer.ChangeIntegralRequestSerializer().read(iprot)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = changeUserIntegral_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: changeUserIntegral_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("changeUserIntegral_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
             new com.today36524.api.user.request.serializer.ChangeIntegralRequestSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: changeUserIntegral_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.today36524.api.user.request.serializer.ChangeIntegralRequestSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: changeUserIntegral_args): String = if(bean == null)  "null" else bean.toString
            }

            class ChangeUserIntegral_resultSerializer extends TCommonBeanSerializer[changeUserIntegral_result]{

            @throws[TException]
            override def read(iprot: TProtocol): changeUserIntegral_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : Int = 0

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.I32 =>  success = iprot.readI32
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = changeUserIntegral_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: changeUserIntegral_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("changeUserIntegral_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.I32, 0.asInstanceOf[Short]))
            oprot.writeI32(elem0)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: changeUserIntegral_result): Unit = {
      
    }
    

            override def toString(bean: changeUserIntegral_result): String = if(bean == null)  "null" else bean.toString
          }

            class changeUserIntegral extends SoaProcessFunction[com.today36524.api.user.service.UserService, changeUserIntegral_args, changeUserIntegral_result, ChangeUserIntegral_argsSerializer,  ChangeUserIntegral_resultSerializer]("changeUserIntegral", new ChangeUserIntegral_argsSerializer(), new ChangeUserIntegral_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: changeUserIntegral_args = null


            @throws[TException]
            def getResult(iface: com.today36524.api.user.service.UserService, args: changeUserIntegral_args):changeUserIntegral_result = {

              val _result = iface.changeUserIntegral(args.request)
              changeUserIntegral_result(_result )
            }
          }
          
            case class unfreezeUser_args(request:com.today36524.api.user.request.UnfreezeUserRequest)

            case class unfreezeUser_result(success:com.today36524.api.user.response.UnfreezeUserResponse)

            class UnfreezeUser_argsSerializer extends TCommonBeanSerializer[unfreezeUser_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): unfreezeUser_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.today36524.api.user.request.UnfreezeUserRequest = null
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRUCT => request = new com.today36524.api.user.request.serializer.UnfreezeUserRequestSerializer().read(iprot)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = unfreezeUser_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: unfreezeUser_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("unfreezeUser_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
             new com.today36524.api.user.request.serializer.UnfreezeUserRequestSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: unfreezeUser_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.today36524.api.user.request.serializer.UnfreezeUserRequestSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: unfreezeUser_args): String = if(bean == null)  "null" else bean.toString
            }

            class UnfreezeUser_resultSerializer extends TCommonBeanSerializer[unfreezeUser_result]{

            @throws[TException]
            override def read(iprot: TProtocol): unfreezeUser_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : com.today36524.api.user.response.UnfreezeUserResponse = null

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.STRUCT =>  success = new com.today36524.api.user.response.serializer.UnfreezeUserResponseSerializer().read(iprot)
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = unfreezeUser_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: unfreezeUser_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("unfreezeUser_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 0.asInstanceOf[Short]))
             new com.today36524.api.user.response.serializer.UnfreezeUserResponseSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: unfreezeUser_result): Unit = {
      
              if(bean.success == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空")
            
                if(bean.success != null)
                new com.today36524.api.user.response.serializer.UnfreezeUserResponseSerializer().validate(bean.success)
              
    }
    

            override def toString(bean: unfreezeUser_result): String = if(bean == null)  "null" else bean.toString
          }

            class unfreezeUser extends SoaProcessFunction[com.today36524.api.user.service.UserService, unfreezeUser_args, unfreezeUser_result, UnfreezeUser_argsSerializer,  UnfreezeUser_resultSerializer]("unfreezeUser", new UnfreezeUser_argsSerializer(), new UnfreezeUser_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: unfreezeUser_args = null


            @throws[TException]
            def getResult(iface: com.today36524.api.user.service.UserService, args: unfreezeUser_args):unfreezeUser_result = {

              val _result = iface.unfreezeUser(args.request)
              unfreezeUser_result(_result )
            }
          }
          
            case class registerUserSql_args(request:com.today36524.api.user.request.RegisterUserRequest)

            case class registerUserSql_result(success:com.today36524.api.user.response.RegisterUserSqlResponse)

            class RegisterUserSql_argsSerializer extends TCommonBeanSerializer[registerUserSql_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): registerUserSql_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.today36524.api.user.request.RegisterUserRequest = null
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRUCT => request = new com.today36524.api.user.request.serializer.RegisterUserRequestSerializer().read(iprot)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = registerUserSql_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: registerUserSql_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("registerUserSql_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
             new com.today36524.api.user.request.serializer.RegisterUserRequestSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: registerUserSql_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.today36524.api.user.request.serializer.RegisterUserRequestSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: registerUserSql_args): String = if(bean == null)  "null" else bean.toString
            }

            class RegisterUserSql_resultSerializer extends TCommonBeanSerializer[registerUserSql_result]{

            @throws[TException]
            override def read(iprot: TProtocol): registerUserSql_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : com.today36524.api.user.response.RegisterUserSqlResponse = null

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.STRUCT =>  success = new com.today36524.api.user.response.serializer.RegisterUserSqlResponseSerializer().read(iprot)
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = registerUserSql_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: registerUserSql_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("registerUserSql_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 0.asInstanceOf[Short]))
             new com.today36524.api.user.response.serializer.RegisterUserSqlResponseSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: registerUserSql_result): Unit = {
      
              if(bean.success == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空")
            
                if(bean.success != null)
                new com.today36524.api.user.response.serializer.RegisterUserSqlResponseSerializer().validate(bean.success)
              
    }
    

            override def toString(bean: registerUserSql_result): String = if(bean == null)  "null" else bean.toString
          }

            class registerUserSql extends SoaProcessFunction[com.today36524.api.user.service.UserService, registerUserSql_args, registerUserSql_result, RegisterUserSql_argsSerializer,  RegisterUserSql_resultSerializer]("registerUserSql", new RegisterUserSql_argsSerializer(), new RegisterUserSql_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: registerUserSql_args = null


            @throws[TException]
            def getResult(iface: com.today36524.api.user.service.UserService, args: registerUserSql_args):registerUserSql_result = {

              val _result = iface.registerUserSql(args.request)
              registerUserSql_result(_result )
            }
          }
          
            case class loginSql_args(request:com.today36524.api.user.request.LoginUserRequest)

            case class loginSql_result(success:com.today36524.api.user.response.LoginUserSqlResponse)

            class LoginSql_argsSerializer extends TCommonBeanSerializer[loginSql_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): loginSql_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.today36524.api.user.request.LoginUserRequest = null
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRUCT => request = new com.today36524.api.user.request.serializer.LoginUserRequestSerializer().read(iprot)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = loginSql_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: loginSql_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("loginSql_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
             new com.today36524.api.user.request.serializer.LoginUserRequestSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: loginSql_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.today36524.api.user.request.serializer.LoginUserRequestSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: loginSql_args): String = if(bean == null)  "null" else bean.toString
            }

            class LoginSql_resultSerializer extends TCommonBeanSerializer[loginSql_result]{

            @throws[TException]
            override def read(iprot: TProtocol): loginSql_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : com.today36524.api.user.response.LoginUserSqlResponse = null

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.STRUCT =>  success = new com.today36524.api.user.response.serializer.LoginUserSqlResponseSerializer().read(iprot)
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = loginSql_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: loginSql_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("loginSql_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 0.asInstanceOf[Short]))
             new com.today36524.api.user.response.serializer.LoginUserSqlResponseSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: loginSql_result): Unit = {
      
              if(bean.success == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空")
            
                if(bean.success != null)
                new com.today36524.api.user.response.serializer.LoginUserSqlResponseSerializer().validate(bean.success)
              
    }
    

            override def toString(bean: loginSql_result): String = if(bean == null)  "null" else bean.toString
          }

            class loginSql extends SoaProcessFunction[com.today36524.api.user.service.UserService, loginSql_args, loginSql_result, LoginSql_argsSerializer,  LoginSql_resultSerializer]("loginSql", new LoginSql_argsSerializer(), new LoginSql_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: loginSql_args = null


            @throws[TException]
            def getResult(iface: com.today36524.api.user.service.UserService, args: loginSql_args):loginSql_result = {

              val _result = iface.loginSql(args.request)
              loginSql_result(_result )
            }
          }
          
            case class modifyUserSql_args(request:com.today36524.api.user.request.ModifyUserRequest)

            case class modifyUserSql_result(success:com.today36524.api.user.response.ModifyUserSqlResponse)

            class ModifyUserSql_argsSerializer extends TCommonBeanSerializer[modifyUserSql_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): modifyUserSql_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.today36524.api.user.request.ModifyUserRequest = null
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRUCT => request = new com.today36524.api.user.request.serializer.ModifyUserRequestSerializer().read(iprot)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = modifyUserSql_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: modifyUserSql_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("modifyUserSql_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
             new com.today36524.api.user.request.serializer.ModifyUserRequestSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: modifyUserSql_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.today36524.api.user.request.serializer.ModifyUserRequestSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: modifyUserSql_args): String = if(bean == null)  "null" else bean.toString
            }

            class ModifyUserSql_resultSerializer extends TCommonBeanSerializer[modifyUserSql_result]{

            @throws[TException]
            override def read(iprot: TProtocol): modifyUserSql_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : com.today36524.api.user.response.ModifyUserSqlResponse = null

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.STRUCT =>  success = new com.today36524.api.user.response.serializer.ModifyUserSqlResponseSerializer().read(iprot)
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = modifyUserSql_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: modifyUserSql_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("modifyUserSql_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 0.asInstanceOf[Short]))
             new com.today36524.api.user.response.serializer.ModifyUserSqlResponseSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: modifyUserSql_result): Unit = {
      
              if(bean.success == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空")
            
                if(bean.success != null)
                new com.today36524.api.user.response.serializer.ModifyUserSqlResponseSerializer().validate(bean.success)
              
    }
    

            override def toString(bean: modifyUserSql_result): String = if(bean == null)  "null" else bean.toString
          }

            class modifyUserSql extends SoaProcessFunction[com.today36524.api.user.service.UserService, modifyUserSql_args, modifyUserSql_result, ModifyUserSql_argsSerializer,  ModifyUserSql_resultSerializer]("modifyUserSql", new ModifyUserSql_argsSerializer(), new ModifyUserSql_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: modifyUserSql_args = null


            @throws[TException]
            def getResult(iface: com.today36524.api.user.service.UserService, args: modifyUserSql_args):modifyUserSql_result = {

              val _result = iface.modifyUserSql(args.request)
              modifyUserSql_result(_result )
            }
          }
          
            case class freezeUserSql_args(request:com.today36524.api.user.request.FreezeUserRequest)

            case class freezeUserSql_result(success:com.today36524.api.user.response.FreezeUserSqlResponse)

            class FreezeUserSql_argsSerializer extends TCommonBeanSerializer[freezeUserSql_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): freezeUserSql_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.today36524.api.user.request.FreezeUserRequest = null
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRUCT => request = new com.today36524.api.user.request.serializer.FreezeUserRequestSerializer().read(iprot)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = freezeUserSql_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: freezeUserSql_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("freezeUserSql_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
             new com.today36524.api.user.request.serializer.FreezeUserRequestSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: freezeUserSql_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.today36524.api.user.request.serializer.FreezeUserRequestSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: freezeUserSql_args): String = if(bean == null)  "null" else bean.toString
            }

            class FreezeUserSql_resultSerializer extends TCommonBeanSerializer[freezeUserSql_result]{

            @throws[TException]
            override def read(iprot: TProtocol): freezeUserSql_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : com.today36524.api.user.response.FreezeUserSqlResponse = null

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.STRUCT =>  success = new com.today36524.api.user.response.serializer.FreezeUserSqlResponseSerializer().read(iprot)
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = freezeUserSql_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: freezeUserSql_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("freezeUserSql_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 0.asInstanceOf[Short]))
             new com.today36524.api.user.response.serializer.FreezeUserSqlResponseSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: freezeUserSql_result): Unit = {
      
              if(bean.success == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空")
            
                if(bean.success != null)
                new com.today36524.api.user.response.serializer.FreezeUserSqlResponseSerializer().validate(bean.success)
              
    }
    

            override def toString(bean: freezeUserSql_result): String = if(bean == null)  "null" else bean.toString
          }

            class freezeUserSql extends SoaProcessFunction[com.today36524.api.user.service.UserService, freezeUserSql_args, freezeUserSql_result, FreezeUserSql_argsSerializer,  FreezeUserSql_resultSerializer]("freezeUserSql", new FreezeUserSql_argsSerializer(), new FreezeUserSql_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: freezeUserSql_args = null


            @throws[TException]
            def getResult(iface: com.today36524.api.user.service.UserService, args: freezeUserSql_args):freezeUserSql_result = {

              val _result = iface.freezeUserSql(args.request)
              freezeUserSql_result(_result )
            }
          }
          
            case class blackUserSql_args(request:com.today36524.api.user.request.BlackUserRequest)

            case class blackUserSql_result(success:com.today36524.api.user.response.BlackUserSqlResponse)

            class BlackUserSql_argsSerializer extends TCommonBeanSerializer[blackUserSql_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): blackUserSql_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.today36524.api.user.request.BlackUserRequest = null
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRUCT => request = new com.today36524.api.user.request.serializer.BlackUserRequestSerializer().read(iprot)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = blackUserSql_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: blackUserSql_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("blackUserSql_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
             new com.today36524.api.user.request.serializer.BlackUserRequestSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: blackUserSql_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.today36524.api.user.request.serializer.BlackUserRequestSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: blackUserSql_args): String = if(bean == null)  "null" else bean.toString
            }

            class BlackUserSql_resultSerializer extends TCommonBeanSerializer[blackUserSql_result]{

            @throws[TException]
            override def read(iprot: TProtocol): blackUserSql_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : com.today36524.api.user.response.BlackUserSqlResponse = null

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.STRUCT =>  success = new com.today36524.api.user.response.serializer.BlackUserSqlResponseSerializer().read(iprot)
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = blackUserSql_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: blackUserSql_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("blackUserSql_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 0.asInstanceOf[Short]))
             new com.today36524.api.user.response.serializer.BlackUserSqlResponseSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: blackUserSql_result): Unit = {
      
              if(bean.success == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空")
            
                if(bean.success != null)
                new com.today36524.api.user.response.serializer.BlackUserSqlResponseSerializer().validate(bean.success)
              
    }
    

            override def toString(bean: blackUserSql_result): String = if(bean == null)  "null" else bean.toString
          }

            class blackUserSql extends SoaProcessFunction[com.today36524.api.user.service.UserService, blackUserSql_args, blackUserSql_result, BlackUserSql_argsSerializer,  BlackUserSql_resultSerializer]("blackUserSql", new BlackUserSql_argsSerializer(), new BlackUserSql_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: blackUserSql_args = null


            @throws[TException]
            def getResult(iface: com.today36524.api.user.service.UserService, args: blackUserSql_args):blackUserSql_result = {

              val _result = iface.blackUserSql(args.request)
              blackUserSql_result(_result )
            }
          }
          
            case class unfreezeUserSql_args(request:com.today36524.api.user.request.UnfreezeUserRequest)

            case class unfreezeUserSql_result(success:com.today36524.api.user.response.UnfreezeUserSqlResponse)

            class UnfreezeUserSql_argsSerializer extends TCommonBeanSerializer[unfreezeUserSql_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): unfreezeUserSql_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.today36524.api.user.request.UnfreezeUserRequest = null
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRUCT => request = new com.today36524.api.user.request.serializer.UnfreezeUserRequestSerializer().read(iprot)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = unfreezeUserSql_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: unfreezeUserSql_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("unfreezeUserSql_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
             new com.today36524.api.user.request.serializer.UnfreezeUserRequestSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: unfreezeUserSql_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.today36524.api.user.request.serializer.UnfreezeUserRequestSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: unfreezeUserSql_args): String = if(bean == null)  "null" else bean.toString
            }

            class UnfreezeUserSql_resultSerializer extends TCommonBeanSerializer[unfreezeUserSql_result]{

            @throws[TException]
            override def read(iprot: TProtocol): unfreezeUserSql_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : com.today36524.api.user.response.UnfreezeUserSqlResponse = null

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.STRUCT =>  success = new com.today36524.api.user.response.serializer.UnfreezeUserSqlResponseSerializer().read(iprot)
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = unfreezeUserSql_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: unfreezeUserSql_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("unfreezeUserSql_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 0.asInstanceOf[Short]))
             new com.today36524.api.user.response.serializer.UnfreezeUserSqlResponseSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: unfreezeUserSql_result): Unit = {
      
              if(bean.success == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空")
            
                if(bean.success != null)
                new com.today36524.api.user.response.serializer.UnfreezeUserSqlResponseSerializer().validate(bean.success)
              
    }
    

            override def toString(bean: unfreezeUserSql_result): String = if(bean == null)  "null" else bean.toString
          }

            class unfreezeUserSql extends SoaProcessFunction[com.today36524.api.user.service.UserService, unfreezeUserSql_args, unfreezeUserSql_result, UnfreezeUserSql_argsSerializer,  UnfreezeUserSql_resultSerializer]("unfreezeUserSql", new UnfreezeUserSql_argsSerializer(), new UnfreezeUserSql_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: unfreezeUserSql_args = null


            @throws[TException]
            def getResult(iface: com.today36524.api.user.service.UserService, args: unfreezeUserSql_args):unfreezeUserSql_result = {

              val _result = iface.unfreezeUserSql(args.request)
              unfreezeUserSql_result(_result )
            }
          }
          

        case class getServiceMetadata_args()

        case class getServiceMetadata_result(success: String)

        class GetServiceMetadata_argsSerializer extends TCommonBeanSerializer[getServiceMetadata_args] {

          @throws[TException]
          override def read(iprot: TProtocol): getServiceMetadata_args = {

            iprot.readStructBegin

            var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null

            while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {
              schemeField = iprot.readFieldBegin
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
              iprot.readFieldEnd
            }

            iprot.readStructEnd

            val bean = getServiceMetadata_args()
            validate(bean)

            bean
          }

          @throws[TException]
          override def write(bean: getServiceMetadata_args, oproto: TProtocol): Unit = {
            validate(bean)
            oproto.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getServiceMetadata_args"))

            oproto.writeFieldStop
            oproto.writeStructEnd
          }

          @throws[TException]
          override def validate(bean: getServiceMetadata_args): Unit = {}

          override def toString(bean: getServiceMetadata_args): String = if (bean == null) "null" else bean.toString
        }



        class GetServiceMetadata_resultSerializer extends TCommonBeanSerializer[getServiceMetadata_result] {
          @throws[TException]
          override def read(iprot: TProtocol): getServiceMetadata_result = {
            iprot.readStructBegin

            var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null

            var success: String = null

            while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {
              schemeField = iprot.readFieldBegin

              schemeField.id match {
                case 0 =>
                schemeField.`type` match {
                  case com.isuwang.org.apache.thrift.protocol.TType.STRING => success = iprot.readString
                  case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }
                case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
              }
              iprot.readFieldEnd
            }

            iprot.readStructEnd
            val bean = getServiceMetadata_result(success)
            validate(bean)

            bean
          }

          @throws[TException]
          override def write(bean: getServiceMetadata_result, oproto: TProtocol): Unit = {
            validate(bean)
            oproto.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getServiceMetadata_result"))

            oproto.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRING, 0.asInstanceOf[Short]))
            oproto.writeString(bean.success)
            oproto.writeFieldEnd

            oproto.writeFieldStop
            oproto.writeStructEnd
          }

          @throws[TException]
          override def validate(bean: getServiceMetadata_result): Unit = {
            if (bean.success == null)
            throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空")
          }

          override def toString(bean: getServiceMetadata_result): String = if (bean == null) "null" else bean.toString

        }



  class getServiceMetadata extends SoaProcessFunction[com.today36524.api.user.service.UserService, getServiceMetadata_args, getServiceMetadata_result, GetServiceMetadata_argsSerializer, GetServiceMetadata_resultSerializer](
  "getServiceMetadata", new GetServiceMetadata_argsSerializer(), new GetServiceMetadata_resultSerializer()) {

      override def isOneway: Boolean = false

      override def getEmptyArgsInstance: getServiceMetadata_args = getServiceMetadata_args()

      @throws[TException]
      override def getResult(iface: com.today36524.api.user.service.UserService, args: getServiceMetadata_args): getServiceMetadata_result = {

        val source = scala.io.Source.fromInputStream(UserServiceCodec.getClass.getClassLoader.getResourceAsStream("com.today36524.api.user.service.UserService.xml"))
        val success = source.mkString
        source.close
        getServiceMetadata_result(success)
      }
      }

      class Processor(iface: com.today36524.api.user.service.UserService) extends SoaCommonBaseProcessor(iface, Processor.getProcessMap)

        object Processor{

          type PF = SoaProcessFunction[com.today36524.api.user.service.UserService, _, _, _ <: TCommonBeanSerializer[_], _ <: TCommonBeanSerializer[_]]

          def getProcessMap(): java.util.Map[String, PF] = {
             val map = new java.util.HashMap[String, PF]()
            map.put("registerUser", new registerUser)
              map.put("login", new login)
              map.put("modifyUser", new modifyUser)
              map.put("freezeUser", new freezeUser)
              map.put("blackUser", new blackUser)
              map.put("changeUserIntegral", new changeUserIntegral)
              map.put("unfreezeUser", new unfreezeUser)
              map.put("registerUserSql", new registerUserSql)
              map.put("loginSql", new loginSql)
              map.put("modifyUserSql", new modifyUserSql)
              map.put("freezeUserSql", new freezeUserSql)
              map.put("blackUserSql", new blackUserSql)
              map.put("unfreezeUserSql", new unfreezeUserSql)
              
            map.put("getServiceMetadata", new getServiceMetadata)
            map
          }

        }
        }
      